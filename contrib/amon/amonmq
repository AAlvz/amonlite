#!/usr/bin/env python
### BEGIN INIT INFO
# Provides:          amonmq
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Starts the Amon ZeroMQ server
### END INIT INFO
import sys
try:
    import amon
except:
    print 'Amon is not installed'
    sys.exit()

import logging
import json
import zmq
from amon.api import log as _log
from amon.api import exception as _exception
from amon.system.daemon import Daemon
from amon.core import settings

PIDFILE = '/var/run/amonmq.pid'
# Keep all log files in one place
LOGFILE = '/usr/local/amon/amonmq.log'

# Configure logging
logging.basicConfig(filename=LOGFILE,level=logging.DEBUG)

class AmonMQDaemon(Daemon):

    def run(self):
        context = zmq.Context()
        router = context.socket(zmq.ROUTER)
        
        try:
            router.bind('tcp:/{0}:{1}'.format(settings.ZEROMQ))
        except Exception, e:
            raise e

        poll = zmq.Poller()
        poll.register(router, zmq.POLLIN)

        while True:
            sockets = dict(poll.poll())
            if router in sockets:
                if sockets[router] == zmq.POLLIN:
                    _id = router.recv() # Internal id, not relevant for this case
                    msg = router.recv(copy=True)
                    
                    try:
                        data = json.loads(msg)
                    except:
                        data = None # Invalid entry

                    try:
                        entry_type = data['type']
                    except:
                        entry_type = None

                    try:
                        content = data['content']
                    except:
                        content = None
                    
                    if content != None:
                        if entry_type == 'log':
                            _log(data['content'])
                        elif entry_type == 'exception':
                            _exception(data['content'])

        router.close()
        context.term()

if __name__ == "__main__":

    daemon = AmonMQDaemon(PIDFILE)

    if len(sys.argv) == 2:
        if 'start' == sys.argv[1]:
            try:
                daemon.start()
            except:
                pass
        elif 'stop' == sys.argv[1]:
            print "Stopping AmonMQ ..."
            daemon.stop()
        elif 'restart' == sys.argv[1]:
            print "Restaring AmonMQ ..."
            daemon.restart()
        elif 'status' == sys.argv[1]:
            try:
                pf = file(PIDFILE,'r')
                pid = int(pf.read().strip())
                pf.close()
            except IOError:
                pid = None
            except SystemExit:
                pid = None

            if pid:
                print 'AmonMQ {0} running as pid {1}'.format(amon.__version__, pid)
            else:
                print 'AmonMQ {0} is not running.'.format(amon.__version__)

        else:
            print "Unknown command"
            sys.exit(2)
            sys.exit(0)
    else:
        print "usage: %s start|stop|restart|status" % sys.argv[0]
        sys.exit(2)

